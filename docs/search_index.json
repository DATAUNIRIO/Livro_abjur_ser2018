[
["index.html", "Jurimetria com aplicações em R Capítulo 1 Apresentação", " Jurimetria com aplicações em R Associação Brasileira de Jurimetria 22 de May de 2018 Capítulo 1 Apresentação Olá! Bem vindo ao curso R para Jurimetria :) Esse é um minicuso baseado no curso de R para Jurimetria da ABJ. Nesse curso abordamos aspectos práticos da Jurimetria, essenciais para um profissional da Estatística que tenha interesse em trabalhar nessa área. O curso é voltado para graduandos em estatística e está organizado em três partes. Parte I: Introdução à jurimetria e setup Definição Terminologia Tipos de pesquisa e exemplos Parte II: Ferramentas da ABJ para importação Introdução ao web scraping com httr e rvest. Pacotes esaj e abjutils Parte III: Transformação: pacotes dplyr, tidyr. Aplicação: Câmaras criminais. Para o curso, será necessário ter conhecimentos do software estatístico R, como a lógica de programação, sintaxe do R e ambientação com o RStudio. Alguns algoritmos utilizam conhecimento de pacotes do tidyverse, como dplyr, tidyr, ggplot2 e stringr. Sobre o ministrante: "],
["materiais-do-minicurso.html", "1.1 Materiais do minicurso", " 1.1 Materiais do minicurso O curso foi montado em RMarkdown, usando um pacote chamado bookdown. O material é 100% reprodutível e está disseminado em diversos lugares no GitHub. Você pode acessar todo o material em https://github.com/abjur/ser2018. As aulas foram organizadas pelo Ciclo de ciência de dados. Trabalharemos com o tidyverse e os pacotes da ABJ Import: esaj e dje. Tidy / Transform: abjutils, dplyr, tidyr, stringr, lubridate, forcats e purrr. Visualize: ggplot2. "],
["configuracao-necessaria-para-o-curso.html", "1.2 Configuração necessária para o curso", " 1.2 Configuração necessária para o curso Para poder rodar os códigos do curso, é importante que você instale todos os pacotes relacionados a este livro. Para isso, basta rodar devtools::install_github(&quot;abjur/ser2018&quot;) Esse código teoricamente funciona pois este livro também é um pacote e adicionamos todas as dependências. Se você não conseguir instalar as dependências, abra o arquivo DESCRIPTION do material: https://github.com/abjur/ser2018/blob/master/DESCRIPTION Nesse aquivo constam todos os pacotes que estamos utilizando. Se algo deu errado na instalação do ser2018, é porquê pelo menos um desses pacotes deu erro na instalação. Note que os pacotes dentro de Remotes devem ser instalados com devtools::install_github(). Note também que os pacotes que estão no Remotes também estão no Imports. "],
["materiais-e-tarefas-adicionais.html", "1.3 Materiais e tarefas adicionais", " 1.3 Materiais e tarefas adicionais Entrar no grupo: t.me/rbrasil Cadastrar na newsletter da ABJ http://www.abj.org.br Ler blog: http://www.abj.org.br/blog/2017/01/27/2017-01-28-assuntos/ Ler blog: http://www.abj.org.br/blog/2016/12/31/2016-12-31-tempos/ Dar uma olhada em https://abjur.github.io/tjspBook Dar uma olhada em http://material.curso-r.com Dar uma olhada em https://tidyverse.org Dar uma olhada em http://r4ds.had.co.nz Dar uma olhada em https://github.com/abjur, https://github.com/courtsbr, https://github.com/decryptr, https://github.com/curso-r "],
["o-que-e-jurimetria.html", "Capítulo 2 O que é Jurimetria?", " Capítulo 2 O que é Jurimetria? A jurimetria é o estudo empírico do direito. Ela se distingue das demais disciplinas jurídicas por tratar o direito de forma concreta. Tratar o direito de forma concreta significa situar nosso objeto de estudo no tempo e no espaço. Ao invés de estudar como é a norma e o ordenamento jurídico, estudamos como as decisões são tomadas nos tribunais, dentro de um determinado escopo. A pesquisa em jurimetria utiliza dados do judiciário para avaliar desde argumentos quantitativos a serem utilizados por juristas e advogados até estimar o impacto de leis. No Brasil, é utilizada principalmente como ferramenta para auxiliar na formulação de políticas públicas, melhorar a administração dos tribunais, calcular o risco de carteiras de processos e otimizar estratégias processuais. "],
["jurimetria-em-empresas.html", "2.1 Jurimetria em empresas", " 2.1 Jurimetria em empresas No mundo corporativo, a jurimetria está se tornando essencial para departamentos jurídicos de grandes empresas e escritórios de advocacia. O movimento da tecnologia no Direito ganhou ainda mais força no ano de 2017 com o advento da AB2L e das lawtechs, as startups do meio jurídico. "],
["a-associacao-brasileira-de-jurimetria.html", "2.2 A Associação Brasileira de Jurimetria", " 2.2 A Associação Brasileira de Jurimetria Nesse sentido, uma das missões da Associação Brasileira de Jurimetria (ABJ) é incentivar e divulgar a jurimetria aos seus associados e ao público em geral. Nossos estudos e pesquisas visam a difusão e o desenvolvimento do campo no Brasil, agregando pesquisadores e fornecendo o ferramental necessário para realização das análises. Neste curso, apresentaremos o ferramental de trabalho desenvolvido no laboratório da ABJ. As ferramentas servem principalmente para extração e arrumação de dados, deixando o caminho livre para realização de análises estatísticas mais aprofundadas. "],
["jurimetria-na-pratica.html", "2.3 Jurimetria na prática", " 2.3 Jurimetria na prática 2.3.1 Tribunais 101 Digamos que a NET tenha colocado seu nome indevidamente no Serasa e você processa a NET por dano moral e material. Quando você entra com um processo, ele é distribuído (levado) numa vara (casinha do juiz), por exemplo uma vara cível de Niterói, e seu processo estará na 1a instância. O juiz então irá decidir sobre o caso, produzindo uma sentença (um texto de 5-10 páginas que explica o que ele decidiu e por quê). Se você ou a NET ficarem infelizes com o resultado, vocês podem entrar com um recurso de apelação (evolução de processo), que será distribuído numa câmara (evolução de vara) do Tribunal de Justiça de São Paulo (TJSP, que fica na praça da Sé, em São Paulo), a ser julgada por desembargadores (evolução de juiz), e seu processo estará na 2a instância. Os desembargadores então irão decidir sobre o caso, produzindo um acórdão (evolução de sentença). Se você ou a NET ficarem infelizes com o resultado, vocês podem novamente entrar com recursos, que irão para o STJ e posteriormente ao STF (em Brasília), a serem julgados por Ministros (evolução de desembargador). Nossos estudos restringem-se ao TJSP, envolvendo (1) e (2). O TJSP atualmente é o mais simples para obtenção automática de processos. 2.3.2 Divisão regional O TJSP é dividido em comarcas, circunscrições e regiões administrativas. As comarcas são conjuntos de um ou mais municípios e uma comarca deve sempre ter uma ou mais varas. Circunscrições e regiões administrativas existem somente para 2.3.3 Tipos de estudo Estudos prospectivos acompanham o processo judicial desde a data de distribuição até o fim. O fim pode ser marcado pela data da sentença, acórdão, ou outro evento de interesse. Ou seja, os casos são indexados pela data de nascimento, e acompanhados até a data de sua morte. Em muitos casos, os processos ainda não atingiram o fim no momento da realização do estudo. Estudos retrospectivo levantam processos que acabaram (por sentença ou por acórdão) e analisa suas características. Ou seja, os casos são indexados pela data de morte. A Figura abaixo mostra os diferentes escopos. ( 1) Prospectivo e retrospectivo. ( 2) Apenas prospectivo. ( 3) Apenas retrospectivo. ( 4) Nenhum dos dois, mas poderia ser capturado por atividade no período. (5 e 6) fora do escopo. ( 7) Nenhum dos dois tipos e não poderia ser capturado (ficou inativo no período). Estudos prospectivos são úteis quando o intuito é estudar o tempo das fases do processo. Já estudos retrospectivos são úteis para a análise do perfil de decisões. Estudos que analisam tempos em bases retrospectivas podem estar cometendo viés. "],
["estudo-camaras-criminais.html", "2.4 Estudo: Câmaras criminais", " 2.4 Estudo: Câmaras criminais O Direito Criminal é uma área que traz consigo diversas questões difíceis e importantes da nossa sociedade. Uma destas questões, que remete ao possível descolamento da teoria do Direito e o que ocorre no mundo real, trata do cumprimento da pena. Considerando-se o plano ideal e o princípio de ampla defesa, mas também a conhecida morosidade dos tribunais, qual é o momento do processo em que deveria ser iniciado o cumprimento de pena? Será que a taxa de reforma das decisões é tão pequena a ponto de justificar o início do cumprimento de pena após a sentença na primeira instância? A Figura 2.1 mostra a distribuição dos resultados dos processos em relação aos órgãos julgadores. Podemos encontrar câmaras com mais de 75% de recursos negados (quarta e sexta) e câmaras com menos de 30% de recursos negados (primeira, segunda e décima segunda). Este resultado poderia ser explicado por duas hipóteses: os processos não são distribuídos aleatoriamente nas câmaras, e é feita uma triagem que envolve o tipo do recurso; ou os magistrados de cada câmara comportam-se de maneiras muito diferentes, mesmo para processos considerados homogêneos. Figura 2.1: Resultados por câmara. "],
["cuidado.html", "2.5 Cuidado", " 2.5 Cuidado As bases de dados utilizadas em estudos jurimétricos foram originalmente concebidas para fins gerenciais e não analíticos. Por isso, observamos muitos dados faltantes, mal formatados e com documentação inadequada. Uma boa porção dos dados só está disponível em páginas HTML e arquivos PDF e grande parte da informação útil está escondida em textos. Chamamos esse fenômeno de “pré-sal sociológico”. Temos hoje diversas bases de dados armazenadas em repositórios públicos ou controladas pelo poder público, mas que precisam ser lapidadas para obtenção de informação útil. O jurimetrista trabalha com dados sujos e desorganizados, mas gera muito valor ao extrair suas informações. Por isso, o profissional precisa dominar o ferramental de extração, transformação e visualização de dados, e é sobre isso que discutiremos na primeira parte do minicurso. Utilizaremos como base o software estatístico R, que atualmente possui diversas ferramentas que ajudam nessas atividades. "],
["wrap-up.html", "2.6 Wrap-up", " 2.6 Wrap-up Jurimetria é a estatística aplicada no direito No judiciário, as coisas mudam de nome conforme mudamos de instâncias Precisamos pensar em estudos prospectivos e retrospectivos Os dados são extremamente desorganizados "],
["importacao-de-dados.html", "Capítulo 3 Importação de dados", " Capítulo 3 Importação de dados Setup Logar no servidor http://r.abj.org.br Novo projeto &gt; Version Control &gt; GIT Colocar a URL https://github.com/abjur/ser2018 Iniciar projeto Abrir o arquivo 02-import.Rmd Rodar library(tidyverse) Agora nós estamos aqui: Nessa parte, vamos aprender a baixar dados da web. No contexto da jurimetria, isso é muito importante por dois motivos: você nunca pode esperar que alguém ofereça esses dados organizados para você e isso é muito divertido e é um aprendizado para a vida. Você, depois dessa aula Se você não praticar depois "],
["usando-o-inspect.html", "3.1 Usando o Inspect", " 3.1 Usando o Inspect Se você quer aprender a baixar dados da web, você precisa aprender a usar o Inspect do seu navegador. Para isso, vamos abrir a página do e-SAJ. Agora clique com o botão direito e depois em “inspecionar” (vamos assumir que você está usando o Google Chrome). Na tela que vai abrir, entre na aba “Network”. O navegador vai pedir que você atualize a página, apertando F5. Faça isso. Agora você verá uma lista de documentos que seu navegador baixou para carregar a página. O primeiro item dessa lista, consultaCompleta.do, contém informações da sua consulta processual. Clique nesse item. O conteúdo dessa página é a requisição web utilizada para acessar o e-SAJ. Basicamente, tudo o que faremos na parte de web scraping é tentar imitar o que esse site faz. Tenha em mente que, para construir um scraper, você usará duas ferramentas principais: seu navegador e o RStudio. "],
["pacotes-httr-xml2-e-rvest.html", "3.2 Pacotes httr, xml2 e rvest", " 3.2 Pacotes httr, xml2 e rvest Esses são os três pacotes mais modernos do R para fazer web scraping. O pacote xml2 tem a finalidade de estruturar arquivos HTML ou XML de forma eficiente, tornando possível a obtenção de tags e seus atributos dentro de um arquivo. O pacote httr é responsável por realizar requisições web para obtenção das páginas de interesse, buscando reduzir ao máximo a complexidade da programação. O pacote rvest é escrito sobre os dois anteriores e por isso eleva ainda mais o nível de especialização para raspagem de dados. Esses pacotes não são suficientes para acessar todo tipo de conteúdo da web. Não discutiremos selenium nesse curso, mas caso queira se aprofundar, acesse aqui e o pacote RSelenium. 3.2.1 GET e POST Uma requisição GET envia uma url ao servidor, possivelmente com alguns parâmetros nessa url (que ficam no final da url depois do ?). O servidor, por sua vez, recebe essa url, processa os parâmetros e retorna uma página HTML para o navegador. A requisição POST envia uma url não modificada para o servidor, mas envia também uma lista de dados preenchidos pelo usuário, que podem ser números, textos ou até imagens. Na maioria dos casos, ao submeter um formulário de um site, fazemos uma requisição POST. O httr possui os métodos GET e POST implementados e são muito similares. A lista de parâmetros enviados pelo usuário pode ser armazenado numa list nomeada, e adicionado ao GET pelo parâmetro query ou no POST pelo parâmetro body. Exemplo de GET httr::GET(&quot;http://google.com/search&quot;, query = list(q = &quot;jurimetria&quot;)) #&gt; Response [http://www.google.com/search?q=jurimetria] #&gt; Date: 2018-05-22 13:51 #&gt; Status: 200 #&gt; Content-Type: text/html; charset=ISO-8859-1 #&gt; Size: 38.1 kB #&gt; &lt;!doctype html&gt;&lt;html itemscope=&quot;&quot; itemtype=&quot;http://schema.org/SearchResu... #&gt; no Direito. Índice. [esconder]. 1 Histórico; 2 Os Três Prismas da &lt;b&gt;Jur... #&gt; softwares jurídicos para prever resultados.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div c... #&gt; Webinar: Tabelas Processuais Unificadas On-line. 02 jul. Webinar: Estrut... #&gt; números e da tecnologia para o jurídico da empresa. Leonardo Barém Leite... #&gt; ayuda a afrontar con fiabilidad el mejor planteamiento procesal.&lt;/span&gt;&lt;... #&gt; &lt;b&gt;Jurimetria&lt;/b&gt;.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;g&quot;&gt;&lt;h3 class=&quot;r&quot;&gt;&lt;a... #&gt; a todo esforço de pesquisa empírica séria é que ninguém muda aquilo que&amp;... #&gt; Brasileira de &lt;b&gt;Jurimetria&lt;/b&gt;, Marcelo Guedes Nunes, que lançou o&amp;nbsp... Exemplo de POST httr::POST(&quot;http://httpbin.org/post&quot;, body = list(x = &quot;Mãe to na request&quot;), encode = &quot;json&quot;) #&gt; Response [http://httpbin.org/post] #&gt; Date: 2018-05-22 13:51 #&gt; Status: 200 #&gt; Content-Type: application/json #&gt; Size: 429 B #&gt; {&quot;args&quot;:{},&quot;data&quot;:&quot;{\\&quot;x\\&quot;:\\&quot;M\\u00e3e to na request\\&quot;}&quot;,&quot;files&quot;:{},&quot;form&quot;... 3.2.2 Exercícios Use o Inspect: Qual o método usado na pesquisa de jurisprudência do TJSP? Qual o método usado na busca avançada de diários de justiça do TJSP? "],
["listando-processos.html", "3.3 Listando processos", " 3.3 Listando processos A forma de listar processos muda se seu estudo é prospectivo ou retrospectivo. Se o estudo for prospectivo, precisamos baixar dados dos Diários de Justiça Eletrônicos (DJE), que são arquivos PDF enormes. Se o estudo for retrospectivo, precisamos baixar dados da Consulta de Julgados de Segundo Grau (CJSG), que é um formulário na internet, mais simples. Se o seu estudo é retrospectivo, use esaj::download_cjsg(). CJSG significa Consulta de Julgados de Segundo Grau. Se o seu estudo é prospectivo, usedje::download_dje(). DJE significa Diário de Justiça Eletrônico "],
["usando-o-esaj-para-listar-processos.html", "3.4 Usando o esaj para listar processos", " 3.4 Usando o esaj para listar processos A CJSG possui vários parâmetros para consulta de decisões. As mais usadas são Palavras-chave Classe, assunto e câmaras Intervalos de datas 3.4.1 Pesquisa por palavras-chave A pesquisa por palavras-chave não tem segredo. Basta você seguir as especificações deste link. É importante ressaltar alguns pontos O e-SAJ não disponibiliza seu tesauro (dicionário estruturado) publicamente. Ou seja, você terá de confiar na pesquisa por sinônimos. Você não pode fazer uma busca completamente vazia. Ou você coloca a palavra-chave, ou você especifica outro parâmetro. Você pode pesquisar o termo a OU (NAO a), se quiser… 3.4.2 Pesquisa por datas Você pode usar duas datas para indexar os processos de sua pesquisa. A data de registro é a data em que o serventuário inclui a decisão no sistema. A data de julgamento é a data em que o conjunto de desembargadores proferiram a decisão. Normalmente, a indexação aconteceria pela data de julgamento, já que queremos vincular os processos à sua data final, não em relação à uma data do sistema. No entanto, as pesquisas indexadas pela data de julgamento não são completamente reprodutíveis, já que à medida que o tempo passa, mais decisões são registradas, mudando a base de julgados. Regra de bolso: Use data de registro se quiser ter certeza de que você pegou todos os casos em um determinado intervalo de tempo. Use data de julgamento se você estiver pesquisando casos mais antigos (por exemplo, de 2016 para trás), já que a quantidade de decisões não registradas nesse escopo é negligenciável. 3.4.3 Tabelas de classes, assuntos e câmaras Classes e assuntos definem, respectivamente, os ritos processuais e os tipos processuais. As câmaras são as casinhas dos desembargadores, que podem ser ordinárias (fixas) ou extraordinárias (eventuais, criadas por diferentes motivos). As classes e assuntos são definidas em formato de árvore. Cada nível dessa árvore tem uma lista de classes/assuntos e seus respectivos códigos. As tabelas de classes/assuntos podem ser obtidas pela função esaj::cjsg_table(). # Não rode esses códigos. Eles baixam os dados diretos da web classes &lt;- esaj::cjsg_table(&quot;classes&quot;) assuntos &lt;- esaj::cjsg_table(&quot;subjects&quot;) Já baixamos essas tabelas e colocamos em arquivos .rds (você sabe o que é um arquivo .rds?) classes &lt;- readr::read_rds(&quot;data/cjsg_classes.rds&quot;) assuntos &lt;- readr::read_rds(&quot;data/cjsg_assuntos.rds&quot;) dplyr::glimpse(assuntos) #&gt; Observations: 3,088 #&gt; Variables: 12 #&gt; $ name0 &lt;chr&gt; &quot;0 - Assunto não Especificado&quot;, &quot;14 - DIREITO TRIBUTÁRIO... #&gt; $ id0 &lt;chr&gt; &quot;0&quot;, &quot;14&quot;, &quot;14&quot;, &quot;14&quot;, &quot;14&quot;, &quot;14&quot;, &quot;14&quot;, &quot;14&quot;, &quot;14&quot;, &quot;14... #&gt; $ name1 &lt;chr&gt; NA, &quot;5913 - Limitações ao Poder de Tributar&quot;, &quot;5913 - Li... #&gt; $ id1 &lt;chr&gt; NA, &quot;5913&quot;, &quot;5913&quot;, &quot;5913&quot;, &quot;5913&quot;, &quot;5913&quot;, &quot;5913&quot;, &quot;591... #&gt; $ name2 &lt;chr&gt; NA, &quot;5914 - Imunidade&quot;, &quot;5914 - Imunidade&quot;, &quot;5914 - Imun... #&gt; $ id2 &lt;chr&gt; NA, &quot;5914&quot;, &quot;5914&quot;, &quot;5914&quot;, &quot;5914&quot;, NA, NA, NA, NA, NA, ... #&gt; $ name3 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, ... #&gt; $ id3 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, ... #&gt; $ name4 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, ... #&gt; $ id4 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, ... #&gt; $ name5 &lt;chr&gt; &quot;0 - Assunto não Especificado&quot;, &quot;10527 - Livros / Jornai... #&gt; $ id5 &lt;chr&gt; &quot;0&quot;, &quot;10527&quot;, &quot;10528&quot;, &quot;10529&quot;, &quot;10530&quot;, &quot;5915&quot;, &quot;10540&quot;... Na prática, você vai procurar os assuntos que quer nessa tabela, obter os respectivos códigos e guardar em um vetor. Cuidado: Lembre-se da cifra oculta! Além disso, muitos casos têm assunto vazio. A tabela de câmaras segue a mesma regra. A única diferença é que não existem níveis, logo você só precisará procurar os nomes em uma coluna camaras &lt;- esaj::cjsg_table(&quot;courts&quot;) camaras &lt;- readr::read_rds(&quot;data/cjsg_camaras.rds&quot;) dplyr::glimpse(camaras) #&gt; Observations: 1,208 #&gt; Variables: 3 #&gt; $ branch &lt;chr&gt; &quot;DIREITO PÚBLICO&quot;, &quot;DIREITO PÚBLICO&quot;, &quot;DIREITO PÚBLICO&quot;... #&gt; $ court &lt;chr&gt; &quot;1.ª Câmara Direito Público B&quot;, &quot;1.º Grupo Direito Públ... #&gt; $ id &lt;chr&gt; &quot;0-434&quot;, &quot;0-438&quot;, &quot;0-439&quot;, &quot;0-57&quot;, &quot;0-209&quot;, &quot;0-1202&quot;, &quot;... 3.4.4 A função download_cjsg Com o escopo em mãos, podemos finalmente começar a baixar dados. Esses são os argumentos da função esaj::download_cjsg(). Veja a documentação ?esaj::download_cjsg args(esaj::download_cjsg) #&gt; function (query, path = &quot;.&quot;, classes = &quot;&quot;, subjects = &quot;&quot;, courts = &quot;&quot;, #&gt; trial_start = &quot;&quot;, trial_end = &quot;&quot;, registration_start = &quot;&quot;, #&gt; registration_end = &quot;&quot;, min_page = 1, max_page = 1, cores = 1, #&gt; wait = 0.5, tj = &quot;tjsp&quot;) #&gt; NULL Esse código baixa duas páginas da pesquisa de jurisprudência usando a palavra-chave homicídio, salvando os arquivos HTML na pasta data-raw/cjsg esaj::download_cjsg(&quot;homicídio&quot;, &quot;data-raw/cjsg&quot;, max_page = 2) Onde guardar os dados? Ao construir um scraper, é importante guardar os dados brutos na máquina ou num servidor, para reprodutibilidade e manutenção do scraper. Se estiver construindo um pacote do R, o melhor lugar para guardar esses dados é na pasta data-raw, como sugerido no livro r-pkgs. Se os dados forem muito volumosos, pode ser necessário colocar esses documentos numa pasta externa ao pacote. 3.4.5 Exercícios Faça o download das páginas 2 à 5 de uma pesquisa com palavra-chave igual ao seu primeiro nome. Descubra quantos resultados tem a sua pesquisa usando a função esaj::peek_cjsg(). 3.4.6 Arrumando os dados Para transformar os arquivos HTML em bases de dados prontas para análise, você precisa rodar esaj::parse_cjsg(). files &lt;- fs::dir_ls(&quot;data-raw/cjsg&quot;, regexp = &quot;page&quot;) d_cjsg &lt;- esaj::parse_cjsg(files) dplyr::glimpse(d_cjsg) #&gt; Observations: 40 #&gt; Variables: 13 #&gt; $ file &lt;chr&gt; &quot;data-raw/cjsg/page1.html&quot;, &quot;data-raw/cjsg/pag... #&gt; $ id_page &lt;chr&gt; &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;... #&gt; $ id_decision &lt;chr&gt; &quot;11471226&quot;, &quot;11471101&quot;, &quot;11471322&quot;, &quot;11471231&quot;... #&gt; $ id_lawsuit &lt;chr&gt; &quot;9000112-30.2018.8.26.0050&quot;, &quot;0035378-08.2010.... #&gt; $ class_subject &lt;chr&gt; &quot;Classe/Assunto:\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t Agrav... #&gt; $ district &lt;chr&gt; &quot;São Paulo&quot;, &quot;Ribeirão Preto&quot;, &quot;Guarulhos&quot;, &quot;S... #&gt; $ court &lt;chr&gt; &quot;2ª Câmara de Direito Criminal&quot;, &quot;2ª Câmara de... #&gt; $ dt_decision &lt;chr&gt; &quot;21/05/2018&quot;, &quot;21/05/2018&quot;, &quot;17/05/2018&quot;, &quot;21/... #&gt; $ dt_publication &lt;chr&gt; &quot;21/05/2018&quot;, &quot;21/05/2018&quot;, &quot;21/05/2018&quot;, &quot;21/... #&gt; $ dt_registration &lt;chr&gt; &quot;21/05/2018&quot;, &quot;21/05/2018&quot;, &quot;21/05/2018&quot;, &quot;21/... #&gt; $ rapporteur &lt;chr&gt; &quot;Luiz Fernando Vaggione&quot;, &quot;Luiz Fernando Vaggi... #&gt; $ summary &lt;chr&gt; &quot;Agravo em execução. Progressão de regime. Exa... #&gt; $ txt_summary &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA... 3.4.7 Exercícios Na pesquisa que você fez: Quem é o relator mais frequente? Qual a comarca de origem mais frequente? [Difícil] Qual é o assunto mais comum? "],
["baixando-processos-individuais.html", "3.5 Baixando processos individuais", " 3.5 Baixando processos individuais A tarefa de baixar documentos a partir de processos será realizada pelas funções esaj::download_cposg(), esaj::download_decision(). 3.5.1 Download CPOSG As funções de download de processos recebem um vetor de números e baixam um HTML para cada deles. Às vezes um número de processo corresponde a mais do que um documento. Nesse caso, ambos os documentos são baixados, adicionando-se identificação de data. processos &lt;- unique(d_cjsg$id_lawsuit) esaj::download_cposg(processos, &quot;data-raw/cposg&quot;) 3.5.2 Baixando decisões Você também pode baixar as decisões (sentenças ou acórdãos) do processo, em PDF. O código a ser rodado nesse caso é acordaos &lt;- d_cjsg$id_decision esaj::download_decision(acordaos, path = &quot;data-raw/decisions&quot;) Por trás da função esaj::download_decision() estamos quebrando um CAPTCHA. Essa função ainda está instável, então pode ser necessário rodá-la várias vezes para obter os documentos finais. "],
["processando-documentos.html", "3.6 Processando documentos", " 3.6 Processando documentos Finalmente, processar documentos significa carregar dados acessíveis em disco e transformar os dados brutos uma base tidy. Usualmente separamos a estruturação em duas etapas: transformar arquivos não-estruturados em um arquivos semi-estruturados (e.g. um arquivo HTML em uma tabela mais um conjunto de textos livres) e transformar arquivos semi-estruturados em uma base analítica (estruturada). A tarefa de processar as páginas HTML será realizada pelas funções esaj::parse_cjsg() e esaj::run_parser(). 3.6.1 Parse CPOSG O parser da consulta de processos foi escrito de um jeito especial. Uma página de resultados tem vários blocos de informações, entre eles i) dados básicos, ii) partes, iii) movimentações e iv) decisões. Em algumas pesquisas, temos interesse em apenas uma parte desses blocos. O parser foi construído para modular essa captura de informações. # lista de arquivos files_cposg &lt;- fs::dir_ls(&quot;data-raw/cposg&quot;) # objeto de parse parser &lt;- esaj::make_parser() %&gt;% esaj::parse_data() %&gt;% esaj::parse_parts() %&gt;% esaj::parse_movs() %&gt;% esaj::parse_decisions() # rodar parse d_cposg &lt;- esaj::run_parser(file = files_cposg, parser = parser, path = &quot;data-raw/cposg_rds&quot;) Outra diferença importante é que, nesse caso, salvamos individualmente os resultados do parse em arquivos .rds. Isso é feito para evitar retrabalho, já que esse processo é computacionalmente intensivo e algo de errado pode acontecer no meio da execução. Para obter a base de dados, basta ler e empilhar os arquivos parciais que foram gerados. rds_files &lt;- fs::dir_ls(&quot;data-raw/cposg_rds&quot;) d_cposg &lt;- purrr::map_dfr(rds_files, readr::read_rds) glimpse(d_cposg) #&gt; Observations: 41 #&gt; Variables: 7 #&gt; $ id &lt;chr&gt; &quot;00000091520158260558&quot;, &quot;00003442220148260347&quot;, &quot;000... #&gt; $ file &lt;chr&gt; &quot;data-raw/cposg/00000091520158260558.html&quot;, &quot;data-ra... #&gt; $ hidden &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL... #&gt; $ data &lt;list&gt; [&lt;# A tibble: 13 x 2, data value ... #&gt; $ parts &lt;list&gt; [&lt;# A tibble: 3 x 4, id name ... #&gt; $ movs &lt;list&gt; [&lt;# A tibble: 23 x 2, movement description ... #&gt; $ decisions &lt;list&gt; [&lt;# A tibble: 1 x 2, date decision ... 3.6.2 Exercícios O que faz a função purrr::map_dfr()? Estude o objeto d_cposg. O que temos na coluna data? E na coluna parts? OBS: Os objetos data, parts, movs e decisions do d_cposg são chamados de list columns. Qual é o outro parâmetro da função esaj::run_parser(), e o que ele faz? "],
["pacote-abjutils.html", "3.7 Pacote abjutils", " 3.7 Pacote abjutils 3.7.1 Trabalhando com números de processos O número identificador de um processo judicial utilizado atualmente pelos tribunais é chamado número CNJ, criado na Resolução 65 do CNJ. A resolução define o padrão NNNNNNN-DD.AAAA.J.TR.OOOO, descrito abaixo. NNNNNNN: Número identificador do processo. DD: Dígito verificador gerado a partir da aplicação do algoritmo Módulo 97 Base 10, conforme Norma ISO 7064:2003. AAAA: Ano do ajuizamento do processo. J: Segmento do poder judiciário. No nosso caso, esse número é sempre 8, que identifica a Justiça Estadual. TR: Identifica o tribunal. No nosso caso, esse número é sempre 26 (TJSP). OOOO: Identifica a unidade de origem do processo. No nosso caso, as possíveis configurações identificam os foros de São Paulo. Na maioria dos casos, o número também identifica a comarca, pois existem poucas comarcas com mais de um foro (e.g. a comarca de São Paulo, que possui mais de dez foros regionais). id_montado &lt;- &quot;0000009-15.2015.8.26.0558&quot; id_limpo_dig &lt;- &quot;00000091520158260558&quot; id_limpo_ndig &lt;- &quot;000000920158260558&quot; As funções abjutils::build_id() e abjutils::clean_id() montam ou limpam o número do processo. abjutils::build_id(id_limpo_dig) #&gt; [1] &quot;0000009-15.2015.8.26.0558&quot; abjutils::clean_id(id_montado) #&gt; [1] &quot;00000091520158260558&quot; A função abjutils::extract_parts() extrai todos os componentes do número do processo. abjutils::extract_parts(id_montado) #&gt; [[1]] #&gt; N D A J T O #&gt; &quot;0000009&quot; &quot;15&quot; &quot;2015&quot; &quot;8&quot; &quot;26&quot; &quot;0558&quot; A função abjutils::separate_cnj() faz o mesmo, mas em uma coluna do banco de dados d_cjsg %&gt;% abjutils::separate_cnj(&quot;id_lawsuit&quot;, remove = FALSE) %&gt;% dplyr::glimpse() #&gt; Observations: 40 #&gt; Variables: 19 #&gt; $ file &lt;chr&gt; &quot;data-raw/cjsg/page1.html&quot;, &quot;data-raw/cjsg/pag... #&gt; $ id_page &lt;chr&gt; &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;... #&gt; $ id_decision &lt;chr&gt; &quot;11471226&quot;, &quot;11471101&quot;, &quot;11471322&quot;, &quot;11471231&quot;... #&gt; $ id_lawsuit &lt;chr&gt; &quot;9000112-30.2018.8.26.0050&quot;, &quot;0035378-08.2010.... #&gt; $ N &lt;chr&gt; &quot;9000112&quot;, &quot;0035378&quot;, &quot;2065637&quot;, &quot;0058979&quot;, &quot;0... #&gt; $ D &lt;chr&gt; &quot;30&quot;, &quot;08&quot;, &quot;34&quot;, &quot;77&quot;, &quot;08&quot;, &quot;65&quot;, &quot;49&quot;, &quot;82&quot;... #&gt; $ A &lt;chr&gt; &quot;2018&quot;, &quot;2010&quot;, &quot;2018&quot;, &quot;2015&quot;, &quot;2013&quot;, &quot;2011&quot;... #&gt; $ J &lt;chr&gt; &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;... #&gt; $ T &lt;chr&gt; &quot;26&quot;, &quot;26&quot;, &quot;26&quot;, &quot;26&quot;, &quot;26&quot;, &quot;26&quot;, &quot;26&quot;, &quot;26&quot;... #&gt; $ O &lt;chr&gt; &quot;0050&quot;, &quot;0506&quot;, &quot;0000&quot;, &quot;0050&quot;, &quot;0032&quot;, &quot;0420&quot;... #&gt; $ class_subject &lt;chr&gt; &quot;Classe/Assunto:\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t Agrav... #&gt; $ district &lt;chr&gt; &quot;São Paulo&quot;, &quot;Ribeirão Preto&quot;, &quot;Guarulhos&quot;, &quot;S... #&gt; $ court &lt;chr&gt; &quot;2ª Câmara de Direito Criminal&quot;, &quot;2ª Câmara de... #&gt; $ dt_decision &lt;chr&gt; &quot;21/05/2018&quot;, &quot;21/05/2018&quot;, &quot;17/05/2018&quot;, &quot;21/... #&gt; $ dt_publication &lt;chr&gt; &quot;21/05/2018&quot;, &quot;21/05/2018&quot;, &quot;21/05/2018&quot;, &quot;21/... #&gt; $ dt_registration &lt;chr&gt; &quot;21/05/2018&quot;, &quot;21/05/2018&quot;, &quot;21/05/2018&quot;, &quot;21/... #&gt; $ rapporteur &lt;chr&gt; &quot;Luiz Fernando Vaggione&quot;, &quot;Luiz Fernando Vaggi... #&gt; $ summary &lt;chr&gt; &quot;Agravo em execução. Progressão de regime. Exa... #&gt; $ txt_summary &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA... A função abjutils::calc_dig() calcula o dígito verificador do processo a partir do número incompleto. A função abjutils::check_dig() checa se o dígito do processo está correto. Essas funções são úteis para i) gerar números de processo aleatórios e ii) arrumar erros de parse, por exemplo, o resultado da leitura de um DJE ou de um PDF escaneado. abjutils::calc_dig(id_limpo_ndig) #&gt; [1] &quot;15&quot; abjutils::check_dig(id_montado) #&gt; [1] TRUE Finalmente, a função abjutils::sample_cnj() serve para criar amostras de números de processos. Esses pocessos podem ser manifestos ou não. Em algumas pesquisas mais complicadas (e.g. nossa pesquisa sobre processamento de homicídios) esse tipo de abordagem é necessária. set.seed(1) abjutils::sample_cnj(n = 10, foros = &quot;0001&quot;, anos = 2015:2017, orgao = &quot;8&quot;, tr = &quot;26&quot;, first_dig = 0, return_df = FALSE) %&gt;% abjutils::build_id() #&gt; [1] &quot;0205974-12.2015.8.26.0001&quot; &quot;0176556-92.2016.8.26.0001&quot; #&gt; [3] &quot;0687022-88.2016.8.26.0001&quot; &quot;0384103-68.2017.8.26.0001&quot; #&gt; [5] &quot;0769841-19.2015.8.26.0001&quot; &quot;0497699-30.2017.8.26.0001&quot; #&gt; [7] &quot;0717618-21.2017.8.26.0001&quot; &quot;0991906-87.2016.8.26.0001&quot; #&gt; [9] &quot;0380035-12.2016.8.26.0001&quot; &quot;0777445-31.2015.8.26.0001&quot; 3.7.2 Trabalhando com acentos A função abjutils::rm_accent() serve para tirar acentos de um texto abjutils::rm_accent(&quot;Têxto cóm açèntõs&quot;) #&gt; [1] &quot;Texto com acentos&quot; Só isso! Mas extremamente útil. Outra versão dessa função pode ser encontrada no pacote rslp. Para quem é desenvolvedor de pacotes, a função abjutils::escape_unicode() é muito útil: ela transforma todos os acentos em códigos do tipo \\uxxxx, permitindo que o pacote funcione em diferentes plataformas, sem os famosos problemas de encoding. Essa função não é para ser utilizada diretamente, mas sim como um addin do RStudio. 3.7.3 Exercício Faça uma tabela contando as combinações dos números OOOO e as comarcas de origem. O que podemos concluir? "],
["wrap-up-1.html", "3.8 Wrap-up", " 3.8 Wrap-up Até agora, vimos Um pouco sobre web scraping Usar o inspect! pacotes httr, xml2 e rvest Scrapers jurimétricos listar números com esaj::download_cjsg(). coletar documentos com esaj::download_cposg(). processar documentos com esaj::run_parser(). Pacote abjutils Trabalhando com número CNJ Trabalhando com acentos: abjutils::rm_accent() Agora, vamos trabalhar as bases de dados obtidas e visualizar com alguns pacotes do tidyverse. "],
["transformacao-e-visualizacao-de-dados.html", "Capítulo 4 Transformação e visualização de dados", " Capítulo 4 Transformação e visualização de dados Até agora, estudamos as principais ferramentas de transformação de dados do tidyverse. Hoje vamos aumentar um pouco mais nosso toolkit e vamos utilizá-lo na prática nos exempos das câmaras e especialização. Ler as bases path &lt;- &quot;data-raw/camaras&quot; d_cjsg &lt;- readr::read_rds(stringr::str_glue(&quot;{path}/d_cjsg.rds&quot;)) d_cposg &lt;- readr::read_rds(stringr::str_glue(&quot;{path}/d_cposg.rds&quot;)) List columns: nest e unnest nest e unnest são operações inversas e servem para tratar dados complecos, como o que temos em d_cposg d_partes &lt;- d_cposg %&gt;% dplyr::select(id_lawsuit, parts) %&gt;% tidyr::unnest(parts) d_decisoes &lt;- d_cposg %&gt;% dplyr::select(id_lawsuit, decisions) %&gt;% tidyr::unnest(decisions) "],
["finalizando-analise-das-camaras.html", "4.1 Finalizando análise das câmaras", " 4.1 Finalizando análise das câmaras Agora vamos fazer gráficos! 4.1.1 Como se distribuem os assuntos em cada câmara? Gráfico fraqueza: d_cjsg %&gt;% tidyr::separate(class_subject, c(&#39;classe&#39;, &#39;assunto&#39;), sep = &#39; / &#39;, extra = &#39;merge&#39;, fill = &#39;right&#39;) %&gt;% ggplot(aes(x = court, fill = assunto)) + geom_bar(colour = &#39;black&#39;, position = &quot;fill&quot;, show.legend = FALSE) Gráfico nutella: d_cjsg %&gt;% ## transformacao ------------------------------------------------------------- # tirar NA (não tem problema pois são aqueles casos que não existem) dplyr::filter(!is.na(court)) %&gt;% tidyr::separate(class_subject, c(&#39;classe&#39;, &#39;assunto&#39;), sep = &#39; / &#39;, extra = &#39;merge&#39;, fill = &#39;right&#39;) %&gt;% # categorizar os assuntos e mudar a ordem dplyr::mutate(assunto = assunto %&gt;% stringr::str_wrap(19) %&gt;% forcats::fct_infreq() %&gt;% # ordena o factor decrescente forcats::fct_rev() %&gt;% forcats::fct_lump(n = 11, other_level = &quot;Outros&quot;)) %&gt;% # pega somente os números das câmaras e coloca zeros à esquerda dplyr::mutate(num = parse_number(court), num = str_pad(num, 2, pad = &quot;0&quot;)) %&gt;% # grafico -------------------------------------------------------------------- ggplot(aes(x = num, fill = assunto)) + geom_bar(colour = &#39;black&#39;, position = &quot;fill&quot;) + guides(fill = guide_legend(reverse = TRUE)) + # coisas cosméticas theme_minimal(14) + scale_y_continuous(labels = scales::percent) + labs(x = &#39;Órgão julgador&#39;, y = &#39;Proporção de \\nprocessos por assunto&#39;, fill = &quot;&quot;) + theme(legend.position = &quot;bottom&quot;) 4.1.2 Qual a proporção de decisões por câmara? Primeiro, vamos montar a função que classifica as decisões. # essa é a classificação final negaram &lt;- stringr::regex(&#39;negara?m|nega-se|negam-se&#39;, ignore_case = TRUE) parcial &lt;- stringr::regex(&#39;parcial&#39;, ignore_case = TRUE) deram &lt;- stringr::regex(&#39;deram|mantiv|dá-se|nul|conhec&#39;, ignore_case = TRUE) extinto &lt;- stringr::regex(&#39;extin&#39;, ignore_case = TRUE) tipos_decisao &lt;- function(decisoes) { dplyr::case_when( stringr::str_detect(decisoes, negaram) ~ &#39;negado&#39;, stringr::str_detect(decisoes, parcial) ~ &#39;parcial&#39;, stringr::str_detect(decisoes, deram) ~ &#39;provido&#39;, stringr::str_detect(decisoes, extinto) ~ &#39;extinto&#39;, TRUE ~ &quot;outros&quot;) } Agora, vamos pegar apenas os casos em que as pessoas entraram com recursos de apelação contra o Ministério Público. partes_apelacoes &lt;- d_cposg %&gt;% dplyr::select(id, id_lawsuit, parts) %&gt;% tidyr::unnest(parts) %&gt;% dplyr::filter(part == &#39;Apelado&#39;, stringr::str_detect(name, &#39;[Mm]inist&#39;)) %&gt;% # Exercício: por que usamos distinct aqui? dplyr::distinct(id_lawsuit) Agora, montamos a base de decisões d_decisoes &lt;- d_cposg %&gt;% dplyr::select(id, id_lawsuit, decisions) %&gt;% tidyr::unnest(decisions) %&gt;% # Exercício: o que faz semi_join()? dplyr::semi_join(partes_apelacoes, &quot;id_lawsuit&quot;) %&gt;% dplyr::arrange(desc(date)) %&gt;% dplyr::group_by(id_lawsuit) %&gt;% # Exercício: o que faz slice()? dplyr::slice(1) %&gt;% dplyr::ungroup() decisoes &lt;- d_decisoes %&gt;% dplyr::mutate(tipo_decisao = tipos_decisao(decision)) %&gt;% dplyr::select(id_lawsuit, tipo_decisao) Gráfico fraqueza: d_cjsg %&gt;% dplyr::distinct(id_lawsuit, .keep_all = TRUE) %&gt;% dplyr::inner_join(decisoes, &#39;id_lawsuit&#39;) %&gt;% ggplot(aes(x = court, fill = tipo_decisao)) + geom_bar(position = &quot;fill&quot;) Gráfico nutella: prop_negados &lt;- function(x) { sum(x == &quot;negado&quot;) / length(x) } d_cjsg %&gt;% dplyr::distinct(id_lawsuit, .keep_all = TRUE) %&gt;% dplyr::inner_join(decisoes, &#39;id_lawsuit&#39;) %&gt;% dplyr::mutate(num = court %&gt;% readr::parse_number() %&gt;% stringr::str_pad(width = 2, pad = &quot;0&quot;) %&gt;% forcats::fct_reorder(tipo_decisao, prop_negados) %&gt;% forcats::fct_rev()) %&gt;% dplyr::mutate(tipo_decisao = fct_infreq(tipo_decisao) %&gt;% fct_rev()) %&gt;% # grafico -------------------------------------------------------------------- ggplot(aes(x = num, fill = tipo_decisao)) + geom_bar(colour = &#39;black&#39;, position = &#39;fill&#39;, size = .3) + geom_hline(yintercept = 1:4 / 4, linetype = 2, alpha = .4) + scale_y_continuous(labels = scales::percent) + coord_flip() + # perfumaria ----------------------------------------------------------------- guides(fill = guide_legend(reverse = TRUE)) + theme_minimal(16) + theme(legend.position = &quot;bottom&quot;) + labs(x = &quot;Câmara&quot;, y = &#39;Proporção de processos por tipo de decisão&#39;, fill = &quot;Decisão&quot;) "],
["wrap-up-2.html", "4.2 Wrap-up", " 4.2 Wrap-up Terminamos o projeto das câmaras Aprendemos tidyr, stringr e forcats no meio do caminho revisitamos ggplot2 e brincamos de visualização. FIM :) "]
]
